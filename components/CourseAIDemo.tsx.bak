import { useState } from 'react'
import { useCourseAI, useQuickCourseQuery } from '@/hooks/useCourseAI'

export default function CourseAIDemo() {
  const { 
    loading, 
    error, 
    recommendations, 
    getCourseRecommendations, 
    clearRecommendations,
    aiInstructions 
  } = useCourseAI()
  
  const quickQueries = useQuickCourseQuery()
  const [customQuery, setCustomQuery] = useState('')

  const handleCustomQuery = async (e: React.FormEvent) => {
    e.preventDefault()
    if (customQuery.trim()) {
      await getCourseRecommendations(customQuery)
    }
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="bg-white rounded-lg shadow-md p-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-4">Course AI Advisor</h1>
        
        {/* AI System Status */}
        <div className="mb-6 p-4 bg-blue-50 rounded-lg">
          <h3 className="font-semibold text-blue-800 mb-2">System Status</h3>
          {aiInstructions ? (
            <div className="text-sm text-blue-700">
              ✅ AI system loaded with {aiInstructions.course_database.length} courses
              <br />
              📊 Course data includes evaluations, statistics, and career information
            </div>
          ) : (
            <div className="text-sm text-blue-600">Loading AI instructions...</div>
          )}
        </div>

        {/* Quick Query Buttons */}
        <div className="mb-6">
          <h3 className="font-semibold text-gray-800 mb-3">Quick Questions</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <button
              onClick={quickQueries.queryRoboticsCourses}
              disabled={loading}
              className="p-3 bg-blue-500 hover:bg-blue-600 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50"
            >
              🤖 Courses for Robotics
            </button>
            <button
              onClick={quickQueries.queryLightChemistryCourses}
              disabled={loading}
              className="p-3 bg-green-500 hover:bg-green-600 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50"
            >
              🧪 Light Chemistry Courses
            </button>
            <button
              onClick={quickQueries.queryBestProgrammingCourses}
              disabled={loading}
              className="p-3 bg-purple-500 hover:bg-purple-600 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50"
            >
              💻 Best Programming Courses
            </button>
            <button
              onClick={quickQueries.queryBusinessCourses}
              disabled={loading}
              className="p-3 bg-orange-500 hover:bg-orange-600 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50"
            >
              📈 Business Courses
            </button>
          </div>
        </div>

        {/* Custom Query Form */}
        <div className="mb-6">
          <h3 className="font-semibold text-gray-800 mb-3">Ask Your Own Question</h3>
          <form onSubmit={handleCustomQuery} className="flex gap-3">
            <input
              type="text"
              value={customQuery}
              onChange={(e) => setCustomQuery(e.target.value)}
              placeholder="e.g., What courses help with data science career?"
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
            <button
              type="submit"
              disabled={loading || !customQuery.trim()}
              className="px-6 py-2 bg-indigo-500 hover:bg-indigo-600 text-white rounded-lg font-medium transition-colors disabled:opacity-50"
            >
              {loading ? 'Asking...' : 'Ask AI'}
            </button>
          </form>
        </div>

        {/* Error Display */}
        {error && (
          <div className="mb-6 p-4 bg-red-50 border border-red-200 rounded-lg">
            <p className="text-red-700">❌ {error}</p>
            <button
              onClick={() => clearRecommendations()}
              className="mt-2 text-sm text-red-600 hover:text-red-800 underline"
            >
              Clear error
            </button>
          </div>
        )}

        {/* Recommendations Display */}
        {recommendations.length > 0 && (
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold text-gray-800">
                Course Recommendations ({recommendations.length})
              </h3>
              <button
                onClick={clearRecommendations}
                className="text-sm text-gray-500 hover:text-gray-700 underline"
              >
                Clear results
              </button>
            </div>
            
            <div className="grid gap-4">
              {recommendations.map((course) => (
                <div key={course.course_id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <h4 className="font-semibold text-gray-800">{course.course_name}</h4>
                      <p className="text-sm text-gray-600">{course.short_name} • {course.level} • {course.credits.total} credits</p>
                    </div>
                    {course.statistics.overall_rating && (
                      <div className="text-right">
                        <div className="text-lg font-bold text-yellow-600">
                          ⭐ {course.statistics.overall_rating.toFixed(1)}
                        </div>
                        <div className="text-xs text-gray-500">
                          {course.statistics.total_evaluations} reviews
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {course.description && (
                    <p className="text-sm text-gray-700 mb-3">{course.description}</p>
                  )}
                  
                  <div className="mb-3">
                    <p className="text-sm font-medium text-blue-800">💡 Why recommended:</p>
                    <p className="text-sm text-blue-700">{course.recommendation_reason}</p>
                  </div>
                  
                  {course.study_topics && (
                    <div className="mb-3">
                      <p className="text-xs font-medium text-gray-600 mb-1">Key Topics:</p>
                      <div className="flex flex-wrap gap-1">
                        {course.study_topics.map((topic, index) => (
                          <span key={index} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
                            {topic}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {course.statistics.workload_hours && (
                    <div className="flex items-center gap-4 text-xs text-gray-600">
                      <span>📚 ~{course.statistics.workload_hours}h/week</span>
                      {course.statistics.content_clarity && (
                        <span>📝 Clarity: {course.statistics.content_clarity.toFixed(1)}/5</span>
                      )}
                      {course.statistics.teaching_engaging && (
                        <span>🎯 Engaging: {course.statistics.teaching_engaging.toFixed(0)}%</span>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
