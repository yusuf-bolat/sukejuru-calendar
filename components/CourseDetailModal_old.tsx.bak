import { useState, useEffect } from 'react'
import { CourseWithStats, EvaluationResponse } from '@/types/courses'
import { supabase } from '@/lib/supabaseClient'
import { X, Star, Users, Clock, TrendingUp, BookOpen, MessageCircle } from 'lucide-react'

interface CourseDetailModalProps {
  course: CourseWithStats
  onClose: () => void
}

export default function CourseDetailModal({ course, onClose }: CourseDetailModalProps) {
  const [evaluationResponses, setEvaluationResponses] = useState<EvaluationResponse[]>([])
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState<'overview' | 'feedback'>('overview')

  useEffect(() => {
    fetchEvaluationResponses()
  }, [course.id])

  const fetchEvaluationResponses = async () => {
    try {
      const { data, error } = await supabase
        .from('course_evaluations')
        .select('general_feedback, advice_to_students, created_at')
        .eq('course_id', course.id)
        .not('general_feedback', 'is', null)
        .not('advice_to_students', 'is', null)
        .order('created_at', { ascending: false })

      if (error) throw error

      // Filter out empty responses
      const filteredResponses = data.filter(response => 
        (response.general_feedback && response.general_feedback.trim()) ||
        (response.advice_to_students && response.advice_to_students.trim())
      )

      setEvaluationResponses(filteredResponses)
    } catch (error) {
      console.error('Error fetching evaluation responses:', error)
    } finally {
      setLoading(false)
    }
  }

  const renderStarRating = (rating: number, showValue = true) => {
    return (
      <div className="flex items-center gap-1">
        {[1, 2, 3, 4, 5].map((star) => (
          <Star
            key={star}
            className={`w-4 h-4 ${star <= rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-400'}`}
          />
        ))}
        {showValue && rating > 0 && (
          <span className="text-sm text-gray-300 ml-1">
            {rating.toFixed(1)}
          </span>
        )}
      </div>
    )
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    })
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-neutral-900 border border-neutral-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col">
        <div className="p-6 border-b border-neutral-800 flex items-center justify-between">
          <div>
            <h2 className="text-2xl font-semibold text-white">{course.code}</h2>
            <h3 className="text-lg text-gray-300 mb-2">{course.name}</h3>
            <div className="flex items-center gap-4 text-sm text-gray-400">
              <span>{course.department}</span>
              <span>•</span>
              <span>{course.credits} credits</span>
              <span>•</span>
              <span>Prof. {course.professor}</span>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Tab Navigation */}
        <div className="flex border-b border-neutral-800">
          <button
            onClick={() => setActiveTab('overview')}
            className={`px-6 py-3 font-medium transition-colors ${
              activeTab === 'overview'
                ? 'text-blue-400 border-b-2 border-blue-400'
                : 'text-gray-400 hover:text-white'
            }`}
          >
            <BookOpen className="w-4 h-4 inline mr-2" />
            Overview & Stats
          </button>
          <button
            onClick={() => setActiveTab('feedback')}
            className={`px-6 py-3 font-medium transition-colors ${
              activeTab === 'feedback'
                ? 'text-blue-400 border-b-2 border-blue-400'
                : 'text-gray-400 hover:text-white'
            }`}
          >
            <MessageCircle className="w-4 h-4 inline mr-2" />
            Student Feedback ({evaluationResponses.length})
          </button>
        </div>

        <div className="flex-1 overflow-y-auto p-6">
          {activeTab === 'overview' && (
            <div className="space-y-8">
              {/* Course Description */}
              {course.description && (
                <div>
                  <h4 className="text-lg font-semibold text-white mb-3">Course Description</h4>
                  <p className="text-gray-300 leading-relaxed">{course.description}</p>
                </div>
              )}

              {/* Statistics Section */}
              {course.stats && course.stats.total_evaluations > 0 ? (
                <div>
                  <div className="flex items-center gap-2 mb-6">
                    <h4 className="text-lg font-semibold text-white">Student Evaluations</h4>
                    <div className="flex items-center gap-1 text-sm text-gray-400">
                      <Users className="w-4 h-4" />
                      <span>{course.stats.total_evaluations} responses</span>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Ratings Grid */}
                    <div className="space-y-4">
                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-gray-300">Course Usefulness</span>
                          {renderStarRating(course.stats.avg_course_usefulness)}
                        </div>
                        <div className="w-full bg-neutral-700 rounded-full h-2">
                          <div
                            className="bg-gradient-to-r from-green-500 to-green-400 h-2 rounded-full"
                            style={{ width: `${(course.stats.avg_course_usefulness / 5) * 100}%` }}
                          />
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-gray-300">Course Difficulty</span>
                          {renderStarRating(course.stats.avg_course_difficulty)}
                        </div>
                        <div className="w-full bg-neutral-700 rounded-full h-2">
                          <div
                            className="bg-gradient-to-r from-orange-500 to-red-400 h-2 rounded-full"
                            style={{ width: `${(course.stats.avg_course_difficulty / 5) * 100}%` }}
                          />
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-gray-300">Workload</span>
                          {renderStarRating(course.stats.avg_course_workload)}
                        </div>
                        <div className="w-full bg-neutral-700 rounded-full h-2">
                          <div
                            className="bg-gradient-to-r from-yellow-500 to-orange-400 h-2 rounded-full"
                            style={{ width: `${(course.stats.avg_course_workload / 5) * 100}%` }}
                          />
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-gray-300">Professor Rating</span>
                          {renderStarRating(course.stats.avg_professor_rating)}
                        </div>
                        <div className="w-full bg-neutral-700 rounded-full h-2">
                          <div
                            className="bg-gradient-to-r from-blue-500 to-blue-400 h-2 rounded-full"
                            style={{ width: `${(course.stats.avg_professor_rating / 5) * 100}%` }}
                          />
                        </div>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-gray-300">Homework Difficulty</span>
                          {renderStarRating(course.stats.avg_homework_difficulty)}
                        </div>
                        <div className="w-full bg-neutral-700 rounded-full h-2">
                          <div
                            className="bg-gradient-to-r from-purple-500 to-purple-400 h-2 rounded-full"
                            style={{ width: `${(course.stats.avg_homework_difficulty / 5) * 100}%` }}
                          />
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center mb-2">
                          <span className="text-gray-300">Exam Difficulty</span>
                          {renderStarRating(course.stats.avg_exam_difficulty)}
                        </div>
                        <div className="w-full bg-neutral-700 rounded-full h-2">
                          <div
                            className="bg-gradient-to-r from-red-500 to-red-400 h-2 rounded-full"
                            style={{ width: `${(course.stats.avg_exam_difficulty / 5) * 100}%` }}
                          />
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-300">Average Hours/Week</span>
                          <span className="text-white flex items-center gap-1">
                            <Clock className="w-4 h-4" />
                            {course.stats.avg_hours_per_week.toFixed(1)}h
                          </span>
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-300">Avg. Exam Prep Time</span>
                          <span className="text-white">
                            {course.stats.avg_exam_prep_time.toFixed(0)} days
                          </span>
                        </div>
                      </div>

                      <div className="bg-neutral-800/50 rounded-lg p-4">
                        <div className="flex justify-between items-center">
                          <span className="text-gray-300">Recommend to Others</span>
                          <span className={`flex items-center gap-1 ${
                            course.stats.recommendation_percentage >= 70 ? 'text-green-400' : 
                            course.stats.recommendation_percentage >= 40 ? 'text-yellow-400' : 'text-red-400'
                          }`}>
                            <TrendingUp className="w-4 h-4" />
                            {course.stats.recommendation_percentage.toFixed(0)}%
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center py-12">
                  <div className="bg-neutral-800/50 rounded-xl p-8 max-w-md mx-auto">
                    <BookOpen className="w-16 h-16 mx-auto mb-4 text-gray-400 opacity-50" />
                    <h4 className="text-lg font-semibold text-gray-300 mb-2">No Evaluations Yet</h4>
                    <p className="text-gray-400 text-sm">
                      Be the first to evaluate this course and help future students make informed decisions.
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'feedback' && (
            <div>
              {loading ? (
                <div className="flex justify-center items-center h-32">
                  <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                </div>
              ) : evaluationResponses.length > 0 ? (
                <div className="space-y-6">
                  {evaluationResponses.map((response, index) => (
                    <div key={index} className="bg-neutral-800/50 rounded-lg p-6">
                      <div className="flex items-center justify-between mb-4">
                        <span className="text-sm text-gray-400">
                          Anonymous Student • {formatDate(response.created_at)}
                        </span>
                      </div>
                      
                      {response.general_feedback && response.general_feedback.trim() && (
                        <div className="mb-4">
                          <h5 className="text-sm font-semibold text-blue-400 mb-2">General Feedback</h5>
                          <p className="text-gray-300 leading-relaxed">{response.general_feedback}</p>
                        </div>
                      )}
                      
                      {response.advice_to_students && response.advice_to_students.trim() && (
                        <div>
                          <h5 className="text-sm font-semibold text-green-400 mb-2">Advice to Future Students</h5>
                          <p className="text-gray-300 leading-relaxed">{response.advice_to_students}</p>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12">
                  <div className="bg-neutral-800/50 rounded-xl p-8 max-w-md mx-auto">
                    <MessageCircle className="w-16 h-16 mx-auto mb-4 text-gray-400 opacity-50" />
                    <h4 className="text-lg font-semibold text-gray-300 mb-2">No Feedback Yet</h4>
                    <p className="text-gray-400 text-sm">
                      Student feedback and advice will appear here once evaluations are submitted.
                    </p>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}
